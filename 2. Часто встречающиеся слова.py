"""
В большой текстовой строке text подсчитать количество встречаемых слов и вернуть 10 самых частых.
 Не учитывать знаки препинания и регистр символов.

Слова разделяются пробелами. Такие слова как don t, it s, didn t итд
(после того, как убрали знак препинания апостроф) считать двумя словами.
Цифры за слова не считаем.

Отсортируйте по убыванию значения количества повторяющихся слов.

Пример

На входе:
text = 'Hello world. Hello Python. Hello again.'
На выходе:
[('hello', 3), ('world', 1), ('python', 1), ('again', 1)]
"""
from collections import Counter
import re


def count_and_find_top_10_words(text):
    # Приводим текст к нижнему регистру
    text = text.lower()

    # Используем регулярное выражение для извлечения слов без знаков препинания
    words = re.findall(r'\b\w+\b', text)

    # Убираем слова, содержащие цифры
    words = [word for word in words if
             not any(char.isdigit() for char in word)]
    #for word in words: Этот фрагмент означает, что мы проходим по каждому элементу word в списке words.
# if not any(char.isdigit() for char in word): Этот фрагмент является условием фильтрации.
# Он проверяет, не содержит ли каждое слово word хотя бы одну цифру. char.isdigit() возвращает True, если
# символ является цифрой, иначе False. Функция any() возвращает True, если хотя бы один элемент
# в итерируемом объекте (в данном случае символы в слове) является истинным.
# Здесь мы проверяем, что ни один символ в слове не является цифрой, и если это так, то слово остается в
# результирующем списке, иначе оно исключается.
# Таким образом, данная строка кода оставляет в списке words только те слова, которые не содержат цифр.

    # Считаем количество встречаемых слов с помощью Counter
    word_counts = Counter(words)

    # Возвращаем 10 наиболее часто встречающихся слов
    top_10_words = word_counts.most_common(10)

    return top_10_words


# Пример использования
text = "Текст с примером. Пример несет текст."
result = count_and_find_top_10_words(text)
print(result)

"""
Этот код сначала приводит текст к нижнему регистру, убирает знаки препинания, 
затем разбивает текст на слова и подсчитывает количество встречаемых слов.
Наконец, он возвращает n (в данном случае 10) самых часто встречающихся слов.
"""

"""
На строке 6 кода используется регулярное выражение для поиска всех слов в тексте. 
Давайте разберем это выражение подробнее:

re.findall() - это функция модуля re, которая находит все вхождения заданного шаблона в
 строке и возвращает их в виде списка.

r'\b\w+\b' - это используемый шаблон регулярного выражения. Разберем его часть за частью:

\b - это граница слова, указывающая, что мы ищем слова, а не их части.
\w+ - это шаблон, совпадающий с любым количеством (одно или более) букв, цифр или знаков подчеркивания.
\b - снова граница слова.
Таким образом, вся строка r'\b\w+\b' ищет все последовательности букв, цифр или знаков подчеркивания,
 которые являются словами, в тексте. После этого найденные слова могут быть собраны и обработаны дальше в коде. 
 Шаблон `\w+` в регулярных выражениях соответствует любой последовательности из одной или более букв
  (в верхнем или нижнем регистре), цифр или знаков подчеркивания. 

Давайте рассмотрим его составляющие:
- `\w` - это метасимвол, который соответствует любой букве (в верхнем или нижнем регистре), 
цифре или знаку подчеркивания.
- `+` - это квантификатор, указывающий, что предшествующий шаблон должен совпасть с одним или более повторениями.

Таким образом, `\w+` позволяет нам найти любое слово или последовательность символов, состоящую из букв,
 цифр и знаков подчеркивания, длиной один или более символов.  
"""